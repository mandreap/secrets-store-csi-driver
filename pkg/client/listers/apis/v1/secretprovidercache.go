/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "sigs.k8s.io/secrets-store-csi-driver/apis/v1"
)

// SecretProviderCacheLister helps list SecretProviderCaches.
// All objects returned here must be treated as read-only.
type SecretProviderCacheLister interface {
	// List lists all SecretProviderCaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SecretProviderCache, err error)
	// SecretProviderCaches returns an object that can list and get SecretProviderCaches.
	SecretProviderCaches(namespace string) SecretProviderCacheNamespaceLister
	SecretProviderCacheListerExpansion
}

// secretProviderCacheLister implements the SecretProviderCacheLister interface.
type secretProviderCacheLister struct {
	indexer cache.Indexer
}

// NewSecretProviderCacheLister returns a new SecretProviderCacheLister.
func NewSecretProviderCacheLister(indexer cache.Indexer) SecretProviderCacheLister {
	return &secretProviderCacheLister{indexer: indexer}
}

// List lists all SecretProviderCaches in the indexer.
func (s *secretProviderCacheLister) List(selector labels.Selector) (ret []*v1.SecretProviderCache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SecretProviderCache))
	})
	return ret, err
}

// SecretProviderCaches returns an object that can list and get SecretProviderCaches.
func (s *secretProviderCacheLister) SecretProviderCaches(namespace string) SecretProviderCacheNamespaceLister {
	return secretProviderCacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretProviderCacheNamespaceLister helps list and get SecretProviderCaches.
// All objects returned here must be treated as read-only.
type SecretProviderCacheNamespaceLister interface {
	// List lists all SecretProviderCaches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SecretProviderCache, err error)
	// Get retrieves the SecretProviderCache from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SecretProviderCache, error)
	SecretProviderCacheNamespaceListerExpansion
}

// secretProviderCacheNamespaceLister implements the SecretProviderCacheNamespaceLister
// interface.
type secretProviderCacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretProviderCaches in the indexer for a given namespace.
func (s secretProviderCacheNamespaceLister) List(selector labels.Selector) (ret []*v1.SecretProviderCache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SecretProviderCache))
	})
	return ret, err
}

// Get retrieves the SecretProviderCache from the indexer for a given namespace and name.
func (s secretProviderCacheNamespaceLister) Get(name string) (*v1.SecretProviderCache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("secretprovidercache"), name)
	}
	return obj.(*v1.SecretProviderCache), nil
}
